#!/usr/bin/env sh

usage()
{
    echo "Usage: $(basename $0)"
    echo "Find the greatest version number tagged in the local repository."
    echo "It is a precondition that the repository has tags of the form packagename.version-release"
    echo "For example, if the repository contains tags pj_one.1.0.0-1 and vv.1.0.2-1, "
    echo "then the greatest version number is 1.0.2 with a release numer of 1."
}

if [ "$1" = "--version" ]; then
    echo 0.0.0-0
    exit
fi
    
if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "-?" ]; then
    usage
    exit
fi    

#
# All the magic happens here.  
#
# The git tag will pull out a list of tags like:
# pk1-3.0.728-1
# pkg-two-3.0.2153-1
# ion3-3.0.1240-1
#
# "rev" reverses the lines to make it easy to throw away the packagename from packagename-version-release. Then reverse it again.
# sed then splits the version-release into W.X.Y-Z with the names current_major, current_minor, current_revision, current_release.
# Later an eval will parse this in and create bash variables. E.g., for the ion3 package above,
# echo $current_revision 
# would output 1240.


taglist=$(git tag -l '*-*.*.*-*' | rev | cut -d- -f-2 |rev | sed 's%\([0-9].*\)\.\([0-9].*\)\.\([0-9].*\)-\([0-9]\)%current_major=\1;current_minor=\2;current_revision=\3;current_release=\4%' | tr '\n' ' ')

major=0
minor=0
revision=0
release=0

for tag in $taglist; do
    # turn the string "current_major=3;current_minor=0;current_revision=1240;current_release=1" into bash variables
    eval $tag  
    if [ $current_major -ge $major ]; then
        major=$current_major
        if [ $current_minor -ge $minor ]; then 
            minor=$current_minor
            if [ $current_revision -ge $revision ]; then
                revision=$current_revision
                if [  $current_release -gt $release ]; then
                    release=$current_release
                fi
            fi
        fi
    fi
done

echo $major.$minor.$revision-$release

