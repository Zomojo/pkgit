#!/usr/bin/env sh

# pkgit-tag-next 
# Insert a tag into the git repo at HEAD which has the next possible version number for the given project
# Looks at all tags in the current git repo and searches for all version numbers.
# Determine the greatest version number, e.g., 1.0.5-4.  Then either reuses that version or increments it, then insert a tag 

usage()
{
cat <<EOF
Usage: $(basename $0) [-h|--help] [--debug] [--version] [-v|--verbose] [-p|--pretend] [-m|--message=<meaningful message>] <package_name>

Create an annotated tag in the git repository with the next version by \
looking at the last tagged version, and adding one to the last dotted element. \
Obviously only works if version numbers are reasonably standard. \
If the current head already has a tag for another project, then the new tag will \
reuse the other projects version number rather than bumping the version number.

For example, if you are trying to create a tag for pkg-two and the last git tag was \
pkg-one-2.3.6-1 and HEAD has moved on from that tag, then the new tag will be \
pkg-two-2.3.7-1. But, if you are trying to create a tag for pkg-two and the last \
git tag was pkg-one-2.3.6-1 which is currently the same as HEAD, then the new tag \
will be pkg-two-2.3.6-1

Options:
  -h|--help  Print this message
  --debug  Executes "set -x" to put the shell into debug mode
  --version  Print the version number and exit
  -v|--verbose  Print out extra information rather than showing nothing
  -p|--pretend  Do all the work but don't actually execute the git tag command. Works best in conjunction with --verbose
  -m|--message  The message to be put into the annotated tag.  Defaults to "Tagging in preparation for packaging"
  -q|--quiet    Surpress the echo of the tag. That is, just do all the git work and do it quietly.
  
Examples:
$(basename $0) -m "The Heisenbug is gone" my-package-name
        
EOF
   
exit 0
}

verbose_echo()
{
    if [ -n "$verbose" ]; then
        echo "$@"
    fi
}

# Parse command line arguments. We accept the usual GNU short and long args and convert them to space separated arguments
# Note that we use `"$@"' to let each command-line parameter expand to a separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=$(getopt -s sh -o hvpqm: -l "help,debug,version,verbose,pretend,quiet,message:" -n "$(basename $0)" -- "$@")
if [ $? != 0 ] ; then echo "Could not parse command line options..." >&2 ; usage ; fi
eval set -- "$TEMP"  # Note the quotes around '$TEMP': they are essential!

message="Tagging in preparation for packaging"
# Overide the defaults with anything from the command line
while true; do
    case "$1" in
        "--debug"         )  set -x ;;
        "-h"|"--help"     )  usage ;;
        "--version"       )  echo 0.0.0-1; exit 0 ;;
        "--verbose"       )  verbose="--verbose" ;;
        "-p"|"--pretend"  )  pretend="--pretend" ;;
        "-q"|"--quiet"    )  quiet="--quiet" ;;
        "-m"|"--message"  )  shift; message="$1" ;;
        "--"              )  shift; break ;;
        *                 )  echo >&2 "getopt error!" ; exit 1 ;;
    esac
    shift
done

if [ -z "$1" ]; then
    echo >&2 No package specified.  You must specify a package to tag.
    exit 1
fi

package="$1"

# Ensure we are on the master branch
current_branch=$(git branch | grep '*' |cut -f2 -d' ') 
if [ "master" != "$current_branch" ]; then
    echo >&2 "Cannot automatically create a version number unless it is on the master branch."
    echo >&2 "You should manually assign a tag by incrementing the release number on the version you branched."
    echo >&2 "Current branch : " $current_branch 
    exit 1
fi

# Make sure the tags are up to date with the central repo
git fetch --tags  2>&1 >/dev/null

# From here there are a few scenarios.
# 1) An exact tag is found. 
#   1a) The HEAD has been tagged already for this package.  If so, no need to do anything
#   1b) The HEAD has already been tagged but for another package.  If so, need to reuse that version number and tag again.
# 2) No exact tag is found.  Need to determine the previous greatest version number and tag HEAD with an incremented version number. 
exact_tag=$(git describe --tags --match='*-*.*.*-*' --exact 2>/dev/null)

# Set up some variables and do the actual git stuff later
if [ $? = 0 ]; then
    # Case 1
    verbose_echo "Found an exact tag = $exact_tag"
    variables=$(echo $exact_tag | sed 's%\(.*\)-\([0-9].*\)\.\([0-9].*\)\.\([0-9].*\)-\([0-9]\)%exact_tag_package=\1;major=\2;minor=\3;revision=\4;release=\5%' | tr '\n' ' ')
    eval $variables
else
    # Case 2
    greatest_version=$(git describe $(git rev-list --tags='*-*.*.*-*' --max-count=1) | rev | cut -d- -f-2 |rev)
    variables=$(echo $greatest_version | sed 's%\([0-9].*\)\.\([0-9].*\)\.\([0-9].*\)-\([0-9]\)%major=\1;minor=\2;revision=\3;release=\4%')    
    eval $variables    
    revision=$(($revision + 1))
fi

if [ "$package" = "$exact_tag_package" ]; then
    # Case 1a
    verbose_echo "Nothing more to do as the tag is correct"
    final_tag=$exact_tag
else
    # This will complete Case 1b and case 2
    final_tag=$package-$major.$minor.$revision-$release
    verbose_echo "Tagging with tag = $final_tag and message = $message"
    if [ -z "$pretend" ]; then
        git tag -a "$final_tag" -m "$message"
        git push origin "$final_tag" >/dev/null 2>&1
    fi
fi

if [ -z "$quiet" ]; then
    echo $final_tag
fi







