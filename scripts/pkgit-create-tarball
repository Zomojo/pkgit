#!/usr/bin/env sh

# Create a tarball of the given project directory with the given tag name
umask 0002

script_dir=$(dirname $(readlink -f $0))

usage()
{
cat <<EOF
Usage: $(basename $0) [-h|--help] [--debug] [--version] [-v|--verbose] [-q|quiet] --project-dir=<fullpath to project> --tag-name=<abc-1.0.3> 

Create a tarball of the given project directory with the given tag name, in some subdirectories of the current working directory

Options:
  -h|--help  Print this message
  --debug  Executes "set -x" to put the shell into debug mode
  --version  Print the version number and exit
  -v|--verbose  Print out extra information rather than showing nothing
  -q|--quiet    Turn verbose information off
  --project-dir Directory of the project to tarball. Must contain a specfile
  --tag-name     What is the tag to be applied.  Needed to create the correct tarball name and structure.
  -s|--spec     Specify a spec file to build.  If no spec file is specified pkgit defaults to using the alphabetically first spec file.
  
Examples:
$(basename $0) --project-dir=/data/work/geoff/zomojo/libs/machine_learning2 --tag-name=ml2-3.0.12345-1
$(basename $0) --tag-name=myproj-7.99.12345-3
        
EOF
   
exit 0
}

die()
{
    echo >&2 "$@"
    exit 1
}

verbose_echo()
{
    if [ -n "$verbose" ]; then
        echo "$@"
    fi
}

# Parse command line arguments. We accept the usual GNU short and long args and convert them to space separated arguments
# Note that we use `"$@"' to let each command-line parameter expand to a separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=$(getopt -s sh -o hvqs: -l "help,debug,version,verbose,quiet,spec:,project-dir::,tag-name:" -n "$(basename $0)" -- "$@")
if [ $? != 0 ] ; then echo "Could not parse command line options..." >&2 ; usage ; fi
eval set -- "$TEMP"  # Note the quotes around '$TEMP': they are essential!

project_dir=$(readlink -f .)

# Overide the defaults with anything from the command line
while true; do
    case "$1" in
        "--debug"         )  set -x;debug="--debug" ;;
        "-h"|"--help"     )  usage ;;
        "--version"       )  echo PKGIT_PROJECT_VERSION; exit 0 ;;
        "-v"|"--verbose"  )  verbose="--verbose" ;;
        "-q"|"--quiet"    )  unset verbose ;;
        "--project-dir"   )  shift ; project_dir="$1" ;;
        "--tag-name"      )  shift ; tag_name="$1" ;;
        "-s"|"--spec"     )  shift; spec="$1" ;;
        "--"              )  shift ; break ;;
        *                 )  die "getopt error!" ; exit 1 ;;
    esac
    shift
done


# By default, use the first spec file found.  Command line overrideable.
if [ -z $spec ]; then
    verbose_echo "Using first spec file in $(basename ${project_dir})"
    spec=$(ls -1 $(basename ${project_dir})/*.spec |head -1 2> /dev/null)
fi

# Did the spec file say they want an .tar.gz or a .tgz
tarball_extension=tar.gz
grep Source $project_dir/$spec |grep tar.gz
if [ $? = 1 ]; then
    tarball_extension=tgz
fi

# Figure out some information about the repository for later use
rpmhome=$(pwd)
current_repo_root=$($script_dir/pkgit-find-repo-root $project_dir)
if [ ! -n "$current_repo_root" ]; then
    die "pkgit-find-repo-root failed"
fi

# Note that the character after the 's' in the sed command is defined by sed to be the command separator character. i.e., you don't have to use '/'
relative_project_path=$(echo ${project_dir} | sed "s^${current_repo_root}/*^^g")  
if [ ! -n "$relative_project_path" ]; then
    relative_project_path=.
fi

cd "$project_dir" 2> /dev/null
repopath=$(git remote show origin |head -n 2 |tail -n1|sed 's/Fetch URL:/git clone/g')
cd "$rpmhome" 2> /dev/null
spec_repopath="$repopath git clone yourreponame \&\& cd yourreponame\/${relative_project_path} \&\& git checkout $tag_name"

# Extract the version, release from the tag_name
release=${tag_name##*-}                # Release is everything after the last minus sign.  Mostly this will be 1
version=${tag_name#${spec%.spec}-*}    # Remove the spec (package) name from the start; leaving something like 3.0.8-1
version=${version%-*}                  # Remove the release number from the end; leaving something like 3.0.8

# copy the almost complete spec file from the project dir to the rpmbuild dir and fill in the missing bits
verbose_echo "Copying spec file and inserting correct version numbers and package source into spec file"
mkdir -p $rpmhome/SPECS/
cp $project_dir/$spec $rpmhome/SPECS/
sed -i "s/%{*version_base}*/$version/" $rpmhome/SPECS/$spec
verbose_echo "Inserting version = $version"
sed -i "s/%{*version_release}*/$release/" $rpmhome/SPECS/$spec
verbose_echo "Inserting release = $release"
sed -i "s|\(%{*description}*.*\)|\1\nPackage Source: $spec_repopath\n|g" $rpmhome/SPECS/$spec
verbose_echo "Inserting Package Source: $spec_repopath"
sed -i "s|%{*projectdir}*|$relative_project_path|g" $rpmhome/SPECS/$spec
verbose_echo "Inserting %projectdir = $relative_project_path"

# rpmbuild expects to find the files in a tarball with the package-version as the top level directory.
mkdir -p $rpmhome/tmp  || die "Could not create a temp directory to build the tarball in"

# Copy over all the files for the given project  
# Assume we need all files in the current directory and subdirectories  
rpmbuild_tmp_project_dir=$rpmhome/tmp/${tag_name%-*}
mkdir -p $rpmbuild_tmp_project_dir  || die "Could not create a specific project directory to build the tarball in"
cd $project_dir >/dev/null 
repo_root=$($script_dir/pkgit-find-repo-root)

relative_specfile_path=${project_dir#$repo_root}
mkdir -p $rpmbuild_tmp_project_dir/$relative_specfile_path/  || die "Could not create $relative_specfile_path to build the tarball in"
if [ -n $verbose ]; then rsync_options="-vv"; else rsync_options="--quiet";fi
rsync -a --cvs-exclude --include='core' $rsync_options "$project_dir/" $rpmbuild_tmp_project_dir/$relative_specfile_path/

#copy in the modified spec file
cp $rpmhome/SPECS/$spec $rpmbuild_tmp_project_dir/$relative_specfile_path/

if [ -e $project_dir/build.sh ] && [ $(grep -c cake $project_dir/build.sh) -gt 0 ]; then    
    # This is the complex packaging case where needed files also exist in directories above and sideways from this project directory
    verbose_echo "Using cake to generate the dependencies for the tarball"
    
    # Since cake is available, use it to find the files required to package
    touch $rpmbuild_tmp_project_dir/.git    # This is so cake can find a "git repo" even when there isn't really one

    cd $project_dir >/dev/null 
    flistcmd="./build.sh --file-list --quiet"
    if [ $(./build.sh --version 2>&1 |head -1 |cut -f1 -d'.') -gt 3 ]; then
        flistcmd+=" --shorten"
    fi
    # Add the compile tools config files if they are in the repo
    if which ct-list-variants >/dev/null 2>&1; then
        flistcmd+=";$(ct-list-variants --no-shorten --style=flat --repoonly)"
    fi

    eval $flistcmd | while read next_file; do
        newfilename=${next_file#$repo_root}
        mkdir -p $(dirname $rpmbuild_tmp_project_dir/$newfilename)
        cp $repo_root/$next_file $rpmbuild_tmp_project_dir/$newfilename
    done 
fi

verbose_echo "Building tarball"
cd $rpmhome/tmp >/dev/null 
mkdir -p $rpmhome/SOURCES/
tar -cvzf $rpmhome/SOURCES/${tag_name%-*}.${tarball_extension} . >/dev/null 2>&1


cd $rpmhome  >/dev/null 
rm -rf $rpmhome/tmp

