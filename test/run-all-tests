#!/usr/bin/env sh

top_working_dir=$(mktemp -d)
remote_repo=$top_working_dir/test-git-repo-remote
local_repo_1=$top_working_dir/test-git-repo-local-1
local_repo_2=$top_working_dir/test-git-repo-local-2

ORIGPATH="$PATH"
PATH="$(readlink -f $(dirname $0)):$(readlink -f $(dirname $0))/../scripts:$PATH"
trap "{ rm -rf $top_working_dir >/dev/null 2>&1; exit 2; }" INT TERM ABRT 


die()
{
    echo >&2 "$1"
    exit 1
}

test_packaging()
{
    git push >/dev/null 2>&1
    git clean -x -d -f >/dev/null
    pkgit 
    if [ $(ls *rpm |wc -l) != 3 ]; then
        die "Failure creating rpms for project $1.  Should have been an rpm, debug rpm and a source rpm created."
    fi

}

create_branch_from_previous_tag()
{
    previous_tag=$1
    variables=$(echo $previous_tag| sed 's%\(.*\)-\([0-9].*\.[0-9].*\.[0-9].*\)-\([0-9].*\)%package_name=\1;branch_name=\2;release=\3%')
    eval "$variables"
    #echo Package name is $package_name and Branch name is $branch_name and release is $release
    
    # Have a look to see if the branch has previously been created
    git branch -a |grep $branch_name >/dev/null
    
    if [ $? != 0 ]; then
        git checkout $previous_tag  >/dev/null 2>&1                # Checkout the code at the given tag
        git checkout -b $branch_name >/dev/null 2>&1              # Make a local branch using just the version number
        git push origin $branch_name >/dev/null 2>&1              # Push the branch to the central repository
    else
        git checkout $branch_name >/dev/null 2>&1
    fi
    
    greatest_version_on_branch=$(pkgit-greatest-version $branch_name)
    #echo "greatest_version_on_branch=$greatest_version_on_branch"
    next_package_name=$package_name-$branch_name-$((release+1))
    echo $next_package_name
}

create-initial-test-repositories $top_working_dir $remote_repo $local_repo_1 $local_repo_2 >/dev/null 2>&1

# Test that pkgit-find-repo-root works
test-pkgit-find-repo-root $top_working_dir $remote_repo $local_repo_1 $local_repo_2 

# Test that pkgit-tag-next can ignore tags like "pre-delete-obsolete-project-2" or "might-need-to-rollback-here-oneday"
cd $local_repo_2
git tag -a -m "First time project two appears" first-time-project-2-appears >/dev/null 2>&1 
git push --tags >/dev/null 2>&1 

cd $local_repo_1
git fetch --tags >/dev/null 2>&1 
git pull >/dev/null 2>&1
test-pkgit-tag-next $top_working_dir $remote_repo $local_repo_1 $local_repo_2 one-1.0.1-1
test-pkgit-clean-precondition $top_working_dir $remote_repo $local_repo_1 $local_repo_2 

# Create a spec file for project 1
cd $local_repo_1/projects/one
pkgit-create-skeleton-spec-file
git add one.spec
git commit -m "project one: Add spec file" >/dev/null
git push  >/dev/null  2>&1

# Test that the greatest version is 1.0.1-1
if [ $(pkgit-greatest-version) != 1.0.1-1 ]; then
    die "Greatest version detected is $(pkgit-greatest-version) but expected 1.0.1-1"
fi

# Actually put some build/install stuff into one.spec and then build the rpm
sed -i "s|%install|./build.sh\n\n%install|g" one.spec
git commit -a -m "project one: Fixes for spec file" >/dev/null
test_packaging one

# Create a spec file for project two and build a "two" rpm
cd $local_repo_1/projects/two
pkgit-create-skeleton-spec-file
sed -i "s|%install|make spanish\n\n%install|g" two.spec
git add two.spec
git commit -m "project two: Add spec file" >/dev/null
test_packaging two

# Make some git history.
sed -i "s|mundo|mundo. mi espaÃ±ol es muy pobre.|g" spanish.c
git commit -a -m "project two: Now featuring a poor excuse."  >/dev/null
cd $local_repo_1/projects/one
sed -i "s|world|wold. My englsh is better than my spansh.|g" english.c
git commit -a -m "project one: Honesty in printfs."  >/dev/null

# Test that the greatest version is 1.0.4-1
cd $local_repo_1/projects/two
test_packaging two
if [ $(pkgit-greatest-version) != 1.0.4-1 ]; then
    die "Greatest version detected is $(pkgit-greatest-version) but expected 1.0.4-1"
fi

# Test that packaging another project at the same sha1 uses the same version number
cd $local_repo_1/projects/one
test_packaging one 
if [ $(pkgit-greatest-version) != 1.0.4-1 ]; then
    die "Greatest version detected is $(pkgit-greatest-version) but expected 1.0.4-1"
fi

# Test re-packaging re-uses the existing tag
test_packaging one
if [ $(pkgit-greatest-version) != 1.0.4-1 ]; then
    die "Greatest version detected is $(pkgit-greatest-version) but expected 1.0.4-1"
fi

# Now rollback the repo to tag one-1.0.2-1 and try to repackage
git checkout one-1.0.2-1 >/dev/null 2>&1
test_packaging one

# Reset back to master 
git checkout master >/dev/null 2>&1

# Test that we can branch, do some fixes and packaging and not affect packaging when we go back to master
next_package_name=$(create_branch_from_previous_tag one-1.0.2-1)

cd $local_repo_1/projects/one
sed -i "s|world|everyone|g" english.c
git commit -a -m "project one: Change to everyone."  >/dev/null
git push >/dev/null 2>&1                                                                      # Put the changes onto the central repository
git tag -a "$next_package_name" -m "Packaging project one with the everyone change"    # Have to manually tag on the branches
git push origin $next_package_name >/dev/null 2>&1
test_packaging one

next_package_name=$(create_branch_from_previous_tag $next_package_name)
sed -i "s|everyone|everyone+dog|g" english.c
git commit -a -m "project one: Include dogs too."  >/dev/null
git push >/dev/null 2>&1                                                                      # Put the changes onto the central repository
git tag -a "$next_package_name" -m "Packaging project one with the everyone change"    # Have to manually tag on the branches
git push origin $next_package_name >/dev/null 2>&1
test_packaging one

# Back to master and check that packaging works
git checkout master >/dev/null 2>&1

sed -i "s|wold|world|g" english.c
git commit -a -m "project one: Fix spelling of world."  >/dev/null
sed -i "s|englsh|english|g" english.c
git commit -a -m "project one: Fix spelling of english."  >/dev/null
test_packaging one

if [ $(pkgit-greatest-version) != 1.0.5-1 ]; then
    die "Greatest version detected is $(pkgit-greatest-version) but expected 1.0.5-1"
fi

# Create the three project that is based on cake
cd $local_repo_1/projects/three
pkgit-create-skeleton-spec-file
git add three.spec
git commit -m "project three: Add spec file" >/dev/null
git push  >/dev/null  2>&1

# Actually put some build/install stuff into one.spec and then build the rpm
sed -i "s|%install|cd projects/three;./build.sh\n\n%install|g" three.spec
git commit -a -m "project three: Fixes for spec file" >/dev/null
test_packaging three

if [ $(pkgit-greatest-version) != 1.0.6-1 ]; then
    die "Greatest version detected is $(pkgit-greatest-version) but expected 1.0.6-1"
fi


# Cleanup
#rm -rf $top_working_dir >/dev/null 2>&1
PATH="$ORIGPATH"
