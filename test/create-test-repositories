#!/bin/dash

# We need three repositories to test with
# Two repositories act like independent users
# The other repository acts like the common remote repo that the 
# independent users check into.
# We can then check for nasty race conditions of people checking in
# between the other users git pull and git push.


# Write a simple hello world program to a file. 
# $1 is the filename
# $2 is the string to write
create_helloworld()
{
cat >$1 <<EOF
#include <stdio.h>

int main(int argc, char** argv)
{
    printf("$2");
    return 0;
}
EOF
}

current_working_directory=$(pwd)

top_working_dir=$(mktemp -d)
remote_repo=$top_working_dir/test-git-repo-remote
local_repo_1=$top_working_dir/test-git-repo-local-1
local_repo_2=$top_working_dir/test-git-repo-local-2

cd $top_working_dir

# Make the "central" repo
mkdir -p $remote_repo
cd $remote_repo
git --bare init --shared 
# 2&>1 /dev/null

# clone the central repo to a local repo and add some files
cd $top_working_dir
git clone $remote_repo $local_repo_1
cd $local_repo_1

mkdir projects
cd projects
mkdir one
cd one
create_helloworld english.c "hello world"

cat >build.sh <<EOF
gcc english.c -o hw-eng
EOF
chmod +x build.sh

cd $local_repo_1
git add .
git commit -a -m "Initial commit"
git push origin master 
git tag -a manual-1.0.0-1 -m "Initial manual tag"
git push origin manual-1.0.0-1

# Clone the second local repo and add some files
cd $top_working_dir
git clone $remote_repo $local_repo_2

cd $local_repo_2
cd projects
mkdir two
cd two
create_helloworld spanish.c "hola mundo"


cd $local_repo_2
git add .
git commit -a -m "Initial commit of project 2"
git push
#pkgit-tag-next --message="Spanish hello world" two

cd $current_working_directory >/dev/null

#rm -rf $top_working_dir 2&>1 /dev/null




